What happens when you initialize a repository? Why do you need to do it?

	You indicate git that you want to keep track of the future changes 
	of the files contained in it. You need to do it so git can 
	initialize the metadata associated to the repository.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The working directory stores the local copies of my files, with the 
	latest changes that I introduced. The staging area stores the 
	last commit from my repository (or my latest changes, if I already 
	added them with "git add"). The 
	repository stores the latest files state that I committed (together 
	with all other commits). Having the staging area allows me to 
	review the changes since my last commit easily, and decide what 
	files to include in each commit.

How can you use the staging area to make sure you have one commit per logical
change?

	Adding one logical change to the staging area and then doing the 
	commit for that change, before proceeding with next logical change.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	In situations in which I want to have two or more separate versions 
	of my code (i.e. an experimental feature). Branches help by 
	allowing me to revert to a branch that does not contain the 
	changes in the new branch, or merging the new branch only when I 
	am sure that the changes are good.

How do the diagrams help you visualize the branch structure?

	Diagrams allow me to see the amount of branches, and where they do 
	converge.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	The result is a single branch combining the changes from both 
	branches. We represent it this way because the two branches 
	indeed merge into a single one, so one of the branches will 
	be removed.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

	Pros: saves us time by merging code by itself
	Cons: there might be some merging that we would do differently 
	from the way git did it. By doing it manually, we can check if 
	a merging makes sense and decide the proper way to do it.